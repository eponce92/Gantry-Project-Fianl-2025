<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="MAIN" Id="{6fda7851-6be6-4301-a4d4-3c33a03aee8d}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// Our gantry controller
	my_gantry: FB_Gantry;
	
	
	// Where to move to
	target_position: ST_Position;
	
	// Speed settings
	move_params: ST_Move_Description := (speed:= 80 , accel := 10, decel := 10, max_torque := 80);
	
	// HMI Tags
	api_fromHMI : fromHMI;
	api_toHMI : toHMI;

	// Internal tags for gantry control
	gantry_cmd_enable: BOOL;
	gantry_cmd_disable: BOOL;
	gantry_cmd_home: BOOL;
	gantry_cmd_move_to_position: BOOL;
	gantry_cmd_stop: BOOL;
	gantry_cmd_reset_error: BOOL;
	
	// actuator command for pen ( TODO implement actuator FB )
	cmd_penAdvance : BOOL := FALSE;

	// step for station sequence
	station_sequence : INT := 0;
	

	F: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Continuously detect which part is selected based on HMI point selection
api_toHMI.stsPartSelected := Find_Part(
    x := INT_TO_LREAL(api_fromHMI.stsPointSelected[0]),
    y := INT_TO_LREAL(api_fromHMI.stsPointSelected[1])
);

// Check for abort command before state machine
IF api_fromHMI.cmdAbort AND station_sequence < 400 THEN
    api_toHMI.stsController := INT#1; // STOPPED
    station_sequence := 400; // Jump to abort sequence
END_IF;

CASE station_sequence OF
	
// INITIALIZATION (0-99)
0: // PLC just started, lets retract the pen and enable the gantry if its OFF 
	cmd_penAdvance := FALSE;
	
	IF my_gantry.sts.state = E_Gantry_State.DISABLED THEN
		gantry_cmd_enable := TRUE;
		station_sequence := 10;
	ELSE
		station_sequence := 100; // Skip to homing sequence
	END_IF
	
10: // Wait for gantry to be enabled and waiting for home
	IF my_gantry.sts.state = E_Gantry_State.HOME_NEEDED THEN
        station_sequence := 100; // Move to homing sequence
	END_IF
	
// HOMING SEQUENCE (100-199)
100: // Start homing sequence
    api_toHMI.stsState := 100;
    api_toHMI.stsController := INT#4; // HOMING
    gantry_cmd_home := TRUE;
    station_sequence := 110;
    
110: // Wait for home to complete
    api_toHMI.stsState := 110;
	IF my_gantry.sts.state = E_Gantry_State.READY THEN
		station_sequence := 200; // Move to idle/ready state
	END_IF

// IDLE AND OPERATION (200-399)
200: // This is normal IDLE state, we wait for a start command from the HMI
    api_toHMI.stsController := INT#2; // IDLE
    api_toHMI.stsState := 200;
    
    IF api_fromHMI.cmdHome THEN
        // Request homing sequence
        gantry_cmd_home := TRUE;
        station_sequence := 110;
    ELSIF api_fromHMI.cmdStart THEN
        // Use the already detected part from Find_Part above
        IF api_toHMI.stsPartSelected > 0 THEN
            station_sequence := 210;
            api_toHMI.stsController := INT#0; // RUNNING
        END_IF
    END_IF

210: // Start drawing - move to first corner of the part (X_min, Y_min)
    api_toHMI.stsState := 210;
	api_fromHMI.cmdStart := FALSE;
	
    target_position.x := INT_TO_LREAL(GVL.Parts[api_toHMI.stsPartSelected, 1]);
    target_position.y := INT_TO_LREAL(GVL.Parts[api_toHMI.stsPartSelected, 2]);
    station_sequence := 215;
    
215: // Check if at_position flag went off after target change
    IF NOT my_gantry.sts.at_position THEN
        gantry_cmd_move_to_position := TRUE;
        station_sequence := 220;
    END_IF
    
220: // Wait for gantry to start moving
    IF my_gantry.sts.state = E_Gantry_State.MOVING THEN
        station_sequence := 225;
    END_IF
    
225: // Wait for gantry to reach first corner
    IF my_gantry.sts.state = E_Gantry_State.READY AND my_gantry.sts.at_position THEN
        // Lower the pen
        cmd_penAdvance := TRUE;
        station_sequence := 230;
    END_IF
    
230: // Move to second corner (X_max, Y_min)
    target_position.x := INT_TO_LREAL(GVL.Parts[api_toHMI.stsPartSelected, 3]);
    target_position.y := INT_TO_LREAL(GVL.Parts[api_toHMI.stsPartSelected, 2]);
    station_sequence := 235;
    
235: // Check if at_position flag went off after target change
    IF NOT my_gantry.sts.at_position THEN
        gantry_cmd_move_to_position := TRUE;
        station_sequence := 240;
    END_IF
    
240: // Wait for gantry to start moving
    IF my_gantry.sts.state = E_Gantry_State.MOVING THEN
        station_sequence := 245;
    END_IF
    
245: // Wait for gantry to reach second corner
    IF my_gantry.sts.state = E_Gantry_State.READY AND my_gantry.sts.at_position THEN
        station_sequence := 250;
    END_IF
    
250: // Move to third corner (X_max, Y_max)
    target_position.x := INT_TO_LREAL(GVL.Parts[api_toHMI.stsPartSelected, 3]);
    target_position.y := INT_TO_LREAL(GVL.Parts[api_toHMI.stsPartSelected, 4]);
    station_sequence := 255;
    
255: // Check if at_position flag went off after target change
    IF NOT my_gantry.sts.at_position THEN
        gantry_cmd_move_to_position := TRUE;
        station_sequence := 260;
    END_IF
    
260: // Wait for gantry to start moving
    IF my_gantry.sts.state = E_Gantry_State.MOVING THEN
        station_sequence := 265;
    END_IF
    
265: // Wait for gantry to reach third corner
    IF my_gantry.sts.state = E_Gantry_State.READY AND my_gantry.sts.at_position THEN
        station_sequence := 270;
    END_IF

270: // Move to fourth corner (X_min, Y_max)
    target_position.x := INT_TO_LREAL(GVL.Parts[api_toHMI.stsPartSelected, 1]);
    target_position.y := INT_TO_LREAL(GVL.Parts[api_toHMI.stsPartSelected, 4]);
    station_sequence := 275;
    
275: // Check if at_position flag went off after target change
    IF NOT my_gantry.sts.at_position THEN
        gantry_cmd_move_to_position := TRUE;
        station_sequence := 280;
    END_IF
    
280: // Wait for gantry to start moving
    IF my_gantry.sts.state = E_Gantry_State.MOVING THEN
        station_sequence := 285;
    END_IF
    
285: // Wait for gantry to reach fourth corner
    IF my_gantry.sts.state = E_Gantry_State.READY AND my_gantry.sts.at_position THEN
        station_sequence := 290;
    END_IF

290: // Move back to first corner to complete rectangle
    target_position.x := INT_TO_LREAL(GVL.Parts[api_toHMI.stsPartSelected, 1]);
    target_position.y := INT_TO_LREAL(GVL.Parts[api_toHMI.stsPartSelected, 2]);
    station_sequence := 295;
    
295: // Check if at_position flag went off after target change
    IF NOT my_gantry.sts.at_position THEN
        gantry_cmd_move_to_position := TRUE;
        station_sequence := 300;
    END_IF
    
300: // Wait for gantry to start moving
    IF my_gantry.sts.state = E_Gantry_State.MOVING THEN
        station_sequence := 305;
    END_IF
    
305: // Wait for gantry to reach first corner again
    IF my_gantry.sts.state = E_Gantry_State.READY AND my_gantry.sts.at_position THEN
        // Raise the pen
        cmd_penAdvance := FALSE;
        station_sequence := 310;
    END_IF
    
310: // Move to origin position (10,10)
    target_position.x := 10;
    target_position.y := 10;
    station_sequence := 315;
    
315: // Check if at_position flag went off after target change
    IF NOT my_gantry.sts.at_position THEN
        gantry_cmd_move_to_position := TRUE;
        station_sequence := 320;
    END_IF
    
320: // Wait for gantry to start moving
    IF my_gantry.sts.state = E_Gantry_State.MOVING THEN
        station_sequence := 325;
    END_IF
    
325: // Wait for gantry to reach origin
    IF my_gantry.sts.state = E_Gantry_State.READY AND my_gantry.sts.at_position THEN
        // Return to idle state
        station_sequence := 200;
    END_IF

// ABORT SEQUENCE (400-499)
400: // First step of abort - send stop command to the gantry
    api_toHMI.stsState := 400;
    api_fromHMI.cmdAbort := FALSE; // Clear abort flag
    cmd_penAdvance := FALSE; // Raise pen
    gantry_cmd_stop := TRUE;
    station_sequence := 410;

410: // Wait for gantry to start stopping
    IF my_gantry.sts.state = E_Gantry_State.STOPPING THEN
        gantry_cmd_stop := FALSE;
        station_sequence := 420;
    END_IF

420: // Wait for gantry to stop and be ready again
    IF my_gantry.sts.state = E_Gantry_State.READY THEN
        gantry_cmd_disable := TRUE;
        station_sequence := 430;
    END_IF

430: // Wait for gantry to start disabling
    IF my_gantry.sts.state = E_Gantry_State.DISABLED THEN
        gantry_cmd_disable := FALSE;
        station_sequence := 440;
    END_IF

440: // Wait for home command from HMI
    api_toHMI.stsState := 440;
    
    IF api_fromHMI.cmdHome THEN
        api_fromHMI.cmdHome := FALSE;
        station_sequence := 0; // Return to beginning to restart the sequence
    END_IF
	 
END_CASE


// Run the gantry function block
my_gantry(
    pcmd_enable := gantry_cmd_enable,
    pcmd_disable := gantry_cmd_disable,
    pcmd_home := gantry_cmd_home,
    pcmd_move_absolute := gantry_cmd_move_to_position,
    pcmd_stop := gantry_cmd_stop,
    pcmd_reset_error := gantry_cmd_reset_error,

    cfg_simulation_mode := TRUE,
    inp_target_position := target_position,
    inp_move_description := move_params
);]]></ST>
    </Implementation>
    <Method Name="Find_Part" Id="{c40e34ab-95dd-4d90-b2b4-21c2a450fab8}">
      <Declaration><![CDATA[METHOD Find_Part : INT
VAR_INPUT
	x : LREAL;
	y : LREAL;
END_VAR
VAR
	i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Initialize return value to 0 (no part found)
Find_Part := 0;

// Loop through all parts to check if point is inside any of them
FOR i := 1 TO 4 DO
    // Check if point (x,y) is inside the part boundaries:
    // x >= X_min AND x <= X_max AND y >= Y_min AND y <= Y_max
    IF x >= GVL.Parts[i,1] AND x <= GVL.Parts[i,3] AND
       y >= GVL.Parts[i,2] AND y <= GVL.Parts[i,4] THEN
        Find_Part := i;
        RETURN;
    END_IF;
END_FOR;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="247" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="282" Count="5" />
      <LineId Id="293" Count="0" />
      <LineId Id="289" Count="1" />
      <LineId Id="288" Count="0" />
      <LineId Id="306" Count="4" />
      <LineId Id="291" Count="1" />
      <LineId Id="294" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="296" Count="3" />
      <LineId Id="279" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="303" Count="1" />
      <LineId Id="280" Count="0" />
      <LineId Id="49" Count="17" />
      <LineId Id="311" Count="0" />
      <LineId Id="68" Count="8" />
      <LineId Id="347" Count="1" />
      <LineId Id="77" Count="46" />
      <LineId Id="312" Count="0" />
      <LineId Id="125" Count="16" />
      <LineId Id="350" Count="13" />
      <LineId Id="349" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.Find_Part">
      <LineId Id="5" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="6" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>